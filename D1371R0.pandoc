---
title: "Pattern Matching"
document: D1371R0
date: 2018-11-21
audience: Evolution
author:
  - name: Sergei Murzin
    email: <smurzin@bloomberg.net>
  - name: Michael Park
    email: <mcypark@gmail.com>
  - name: David Sankel
    email: <dsankel@bloomberg.net>
  - name: Dan Sarginson
    email: <dsarginson@bloomberg.net>
toc: true
toc-depth: 4
---

# Revision History

  - R0 --- Merged [@P1260R0] and [@P1308R0]

# Introduction

As algebraic data types gain better support in C++ with facilities such as
`tuple` and `variant`, the importance of mechanisms to interact with them have
increased. While mechanisms such as `apply` and `visit` have been added, their
usage is quite complex and limited even for simple cases. Pattern matching is
a widely adopted mechanism across many programming languages to interact with
algebraic data types that can help greatly simplify C++. Examples of programming
languages include text-based languages such as SNOBOL back in the 1960s,
functional languages such as Haskell and OCaml, and "mainstream" languages such
as Scala, Swift, and Rust.

This paper is a result of collaboration between the authors of [@P1260R0] and
[@P1308R0], two pattern matching proposals more or less steming from the 2015
[@P0095R1] proposal.

# Motivation and Scope

Virtually every program involves branching on some predicates applied to a value
and conditionally binding names to some of its components for use in subsequent
logic. Today, C++ provides two types of selection statements: the `if` statement
and the `switch` statement.

Since `switch` statements can only operate on a _single_ integral value and
`if` statements operate on an _arbitrarily_ complex boolean expression, there is
a significant gap between the two constructs even in inspection of
the "vocabulary types" provided by the standard library.

In C++17, structured binding declarations [@P0144R2] introduced the ability to
concisely bind names to components of `tuple`-like values. The proposed
direction of this paper aims to naturally extend this notion by performing
__structured inspection__  with `inspect` statements and expressions. The
goal of `inspect` is to bridge the gap between `switch` and `if` statements
with a __declarative__, __structured__, __cohesive__, and __composable__
mechanism.

# Before/After Comparisons

## Matching Integrals

::: tonytable

### Before
```cpp
switch (x) {
  case 0: std::cout << "got zero"; break;
  case 1: std::cout << "got one"; break;
  default: std::cout << "don't care";
}
```

### After
```cpp
inspect (x) {
  0: std::cout << "got zero";
  1: std::cout << "got one";
  _: std::cout << "don't care";
}
```

:::

## Matching Strings

::: tonytable

### Before
```cpp
if (s == "foo") {
  std::cout << "got foo";
} else if (s == "bar") {
  std::cout << "got bar";
} else {
  std::cout << "don't care";
}
```

### After
```cpp
inspect (s) {
  "foo": std::cout << "got foo";
  "bar": std::cout << "got bar";
  _: std::cout << "don't care";
}
```

:::

\pagebreak

## Matching Tuples

::: tonytable

### Before
```cpp
auto&& [x, y] = p;
if (x == 0 && y == 0) {
  std::cout << "on origin";
} else if (x == 0) {
  std::cout << "on y-axis";
} else if (y == 0) {
  std::cout << "on x-axis";
} else {
  std::cout << x << ',' << y;
}
```

### After
```cpp
inspect (p) {
  [0, 0]: std::cout << "on origin";
  [0, y]: std::cout << "on y-axis";
  [x, 0]: std::cout << "on x-axis";
  [x, y]: std::cout << x << ',' << y;
}
```

:::

## Matching Variants

::: tonytable

### Before
```cpp
struct visitor {
  void operator()(int i) const {
    os << "got int: " << i;
  }
  void operator()(float f) const {
    os << "got float: " << f;
  }
  std::ostream& os;
};
std::visit(visitor{strm}, v);
```

### After
```cpp
inspect (v) {
  <int> i: strm << "got int: " << i;
  <float> f: strm << "got float: " << f;
}
```

:::

## Matching Polymorphic Types

```cpp
struct Shape { virtual ~Shape() = default; };
struct Circle : Shape { int radius; };
struct Rectangle : Shape { int width, height; };
```

\pagebreak

::: tonytable

### Before
```cpp
virtual int Shape::get_area() const = 0;

int Circle::get_area() const override {
  return 3.14 * radius * radius;
}
int Rectangle::get_area() const override {
  return width * height;
}
```

### After
```cpp
int get_area(const Shape& shape) {
  return inspect (shape) {
    <Circle>    [r]    => 3.14 * r * r,
    <Rectangle> [w, h] => w * h
  }
}
```

:::

## Evaluating Expression Trees

```cpp
struct Expr;
struct Neg { std::shared_ptr<Expr> expr; };
struct Add { std::shared_ptr<Expr> lhs, rhs; };
struct Mul { std::shared_ptr<Expr> lhs, rhs; };
struct Expr : std::variant<int, Neg, Add, Mul> { using variant::variant; };

namespace std {
    template <>
    struct variant_size<Expr> : variant_size<Expr::variant> {};

    template <std::size_t I>
    struct variant_alternative<I, Expr> : variant_alternative<I, Expr::variant> {};
}
```

::: tonytable

### Before {width=.48}
```cpp
int eval(const Expr& expr) {
  struct visitor {
    int operator()(int i) const {
      return i;
    }
    int operator()(const Neg& n) const {
      return -eval(*n.expr);
    }
    int operator()(const Add& a) const {
      return eval(*a.lhs) + eval(*a.rhs);
    }
    int operator()(const Mul& m) const {
      // Optimize for multiplication by 0
      if(int * lhsInt = std::get_if<int>(m.lhs.get()); lhsInt && *lhsInt == 0)
        return 0;
      if(int * rhsInt = std::get_if<int>(m.rhs.get()); rhsInt && *rhsInt == 0)
        return 0;

      return eval(*m.lhs) * eval(*m.rhs);
    }
  };
  return std::visit(visitor{}, expr);
}
```

### After {width=.53}
```cpp
int eval(const Expr& expr) {
  inspect (expr) {
    <int> i: return i;
    <Neg> [*e]: return -eval(e);
    <Add> [*l, *r]: return eval(l) + eval(r);
    <Mul> [*<int> 0, _]: return 0;
    <Mul> [_, *<int> 0]: return 0;
    <Mul> [*l, *r]: return eval(l) * eval(r);
  }
}
```

:::

# Design Overview

## Basic Syntax

There are two forms of `inspect`: the statement form and the expression form.

> | `inspect constexpr`*~opt~* `(` *init-statement~opt~* *condition* `) {`
> |     *pattern* *guard~opt~* `:` *statement*
> |     *pattern* *guard~opt~* `:` *statement*
> |     ...
> | `}`

> | `inspect constexpr`*~opt~* `(` *init-statement~opt~* *condition* `)` *trailing-return-type~opt~* `{`
> |     *pattern* *guard~opt~* `=>` *expression* `,`
> |     *pattern* *guard~opt~* `=>` *expression* `,`
> |     ...
> | `}`

> | *guard:*
> |     `if (` *expression* `)`

[ _Note:_ The expression form is roughly equivalent to:

> | `std::invoke([&]()` *trailing-return-type~opt~* `{`
> |     `inspect constexpr`*~opt~* `(` *init-statement~opt~* *condition* `) {`
> |          *pattern* *guard~opt~* `: return` *expression* `;`
> |          *pattern* *guard~opt~* `: return` *expression* `;`
> |          ...
> |     `}`
> | `})`

--- _end note_ ]

## Basic Model

Within the parentheses, the `inspect` statement is equivalent to `switch` and
`if` statements except that no conversion nor promotion takes place in
evaluating the value of its condition.

When the `inspect` statement is executed, its condition is evaluated and matched
in order (first match semantics) against each pattern. If a pattern successfully
matches the value of the condition and the boolean expression in the guard
evaluates to `true` (or if there is no guard at all), control is passed to the
statement following the matched pattern label. If the guard expression evaluates
to `false`, control flows to the subsequent pattern.

If no pattern matches, none of the statements are executed for the statement
form and `std::no_match` exception is thrown for the expression form.

## Types of Patterns

### Primary Patterns

#### Wildcard Pattern

The wildcard pattern has the form:

> | `_`

and matches any value `v`.

```cpp
int v = /* ... */;

inspect (v) {
    _: std::cout << "ignored";
//  ^ wildcard pattern
}
```

[ _Note:_ Even though `_` is a valid identifier, it does not introduce a name. --- _end note_ ]

#### Identifier Pattern {#identifier-pat}

The identifier pattern has the form:

> | _identifier_

and matches any value `v`. The introduced name behaves as an lvalue
referring to `v`, and is in scope from its point of declaration until
the end of the statement following the pattern label.

```cpp
int v = /* ... */;

inspect (v) {
    x: std::cout << x;
//  ^ identifier pattern
}
```

[ _Note:_ If the identifier pattern is used at the top-level, it has the same
          syntax as a `goto` label. --- _end note_ ]

#### Expression Pattern {#expression-pat}

The expression pattern has the form:

> | _literal_
> | `this`
> | `^` _primary-expression_

and matches value `v` if a call to member `e.match(v)` or else a non-member
ADL-only `match(e, v)` is contextually convertible to `bool` and evaluates
to `true` where `e` is the _literal_ or _primary-expression_.

The default behavior of `match(x, y)` is `x == y`.

```cpp
int v = /* ... */;

inspect (v) {
    0: std::cout << "got zero";
    1: std::cout << "got one";
//  ^ expression pattern
}
```

```cpp
static constexpr int zero = 0, one = 1;
int v = /* ... */;

inspect (v) {
    ^zero: std::cout << "got zero";
//  ^^^^^ expression pattern
}
```

### Compound Patterns

#### Structured Binding Pattern

The structured binding pattern has the following two forms:

> | `[` _pattern_~0~ `,` _pattern_~1~ `,` ... `,` _pattern_~N~ `]`
> | `[` _designator_~0~ `:` _pattern_~0~ `,` _designator_~1~ `:` _pattern_~1~ `,` ... `,` _designator_~N~ : _pattern_~N~ `]`

The first form matches value `v` if each _pattern~i~_ matches the _i_^th^
component of `v`. The components of `v` are given by the structured binding
declaration: `auto&& [__e`~0~`, __e`~1~`,` ...`, __e`~N~`] = v;` where each
`__e`_~i~_ are unique exposition-only identifiers.

```cpp
std::pair<int, int> p = /* ... */;

inspect (p) {
    [0, 0]: std::cout << "on origin";
    [0, y]: std::cout << "on y-axis";
//      ^ identifier pattern
    [x, 0]: std::cout << "on x-axis";
//      ^ expression pattern
    [x, y]: std::cout << x << ',' << y;
//  ^^^^^^ structured binding pattern
}
```

The second form matches value `v` if each _pattern~i~_ matches the direct
non-static data member of `v` named _identifier_ from each _designator~i~_.
If an _identifier_ from any _designator~i~_ does not refer to a direct
non-static data member of `v`, the program is ill-formed.

```cpp
struct Player { std::string name; int hitpoints; int coins; };

void get_hint(const Player& p) {
    inspect (p) {
        [.hitpoints: 1]: std::cout << "You're almost destroyed. Give up!\n";
        [.hitpoints: 10, .coins: 10]: std::cout << "I need the hints from you!\n";
        [.coins: 10]: std::cout << "Get more hitpoints!\n";
        [.hitpoints: 10]: std::cout << "Get more ammo!\n";
        [.name: n]: {
            if (n != "The Bruce Dickenson") {
                std::cout << "Get more hitpoints and ammo!\n";
            } else {
                std::cout << "More cowbell!\n";
            }
        }
    }
}
```

[ _Note:_ Unlike designated initializers, the order of the designators need not be
the same as the declaration order of the members of the class. --- _end note_ ]

#### Alternative Pattern

The alternative pattern has the following forms:

> | `< auto >` _pattern_
> | `<` _concept_ `>` _pattern_
> | `<` _type_ `>` _pattern_
> | `<` _constant-expression_ `>` _pattern_

Let `v` be the value being matched and `V` be `std::remove_cvref_t<decltype(v)>`.\newline
Let `Alt` be the entity inside the angle brackets.

__Case 1: `std::variant`-like__

If `std::variant_size_v<V>` is well-formed and evaluates to an integral,
the alternative pattern matches `v` if `Alt` is compatible with the current
index of `v` and _pattern_ matches the active alternative of `v`.

Let `I` be the current index of `v` given by a member `v.index()` or else
a non-member ADL-only `index(v)`. The active alternative of `v` is given by
`std::variant_alternative_t<I, V>&` initialized by a member `v.get<I>()` or
else a non-member ADL-only `get<I>(v)`.

`Alt` is compatible with `I` if one of the following four cases is true:

  - `Alt` is `auto`
  - `Alt` is a _concept_ and `std::variant_alternative_t<I, V>` satisfies the _concept_.
  - `Alt` is a _type_ and `std::is_same_v<Alt, std::variant_alternative_t<I, V>>` is `true`
  - `Alt` is a _constant-expression_ that can be used in a `switch` and is the same value as `I`.

::: tonytable

### Before {width=.53}
```cpp
std::visit([&](auto&& x) {
  strm << "got auto: " << x;
}, v);
```

### After {width=.47}
```cpp
inspect (v) {
  <auto> x: strm << "got auto: " << x;
}
```

---

```cpp
std::visit([&](auto&& x) {
  using X = std::remove_cvref_t<decltype(x)>;
  if constexpr (C1<X>()) {
    strm << "got C1: " << x;
  } else if constexpr (C2<X>()) {
    strm << "got C2: " << x;
  }
}, v);
```

```cpp
inspect (v) {
  <C1> c1: strm << "got C1: " << c1;
  <C2> c2: strm << "got C2: " << c2;
}
```

---

```cpp
std::visit([&](auto&& x) {
  using X = std::remove_cvref_t<decltype(x)>;
  if constexpr (std::is_same_v<int, X>) {
    strm << "got int: " << x;
  } else if constexpr (
      std::is_same_v<float, X>) {
    strm << "got float: " << x;
  }
}, v);
```

```cpp
inspect (v) {
  <int> i: strm << "got int: " << i;
  <float> f: strm << "got float: " << f;
}
```

---

```cpp
std::variant<int, int> v = /* ... */;

std::visit([&](int x) {
  strm << "got int: " << x;
}, v);
```

```cpp
std::variant<int, int> v = /* ... */;

inspect (v) {
  <int> x: strm << "got int: " << x;
}
```

---

```cpp
std::variant<int, int> v = /* ... */;

std::visit([&](auto&& x) {
  switch (v.index()) {
    case 0: {
      strm << "got first: " << x;
      break;
    }
    case 1: {
      strm << "got second: " << x;
      break;
    }
  }
}, v);
```

```cpp
std::variant<int, int> v = /* ... */;

inspect (v) {
  <0> x: strm << "got first: " << x;
  <1> x: strm << "got second: " << x;
}
```

:::

__Case 2: `std::any`-like__

> | `<` _type_ `>` _pattern_

If `Alt` is a _type_ and there exists a valid non-member ADL-only
`any_cast<Alt>(&v)`, let `p` be its result. The alternative pattern
matches if `p` contextually converted to `bool` evaluates to `true`,
and _pattern_ matches `*p`.

::: tonytable

### Before
```cpp
std::any a = 42;

if (int* i = any_cast<int>(&a)) {
  std::cout << "got int: " << *i;
} else if (float* f = any_cast<float>(&a)) {
  std::cout << "got float: " << *f;
}
```

### After
```cpp
std::any a = 42;

inspect (a) {
  <int> i: std::cout << "got int: " << i;
  <float> f: std::cout << "got float: " << f;
}
```

:::

__Case 3: Polymorphic Types__

> | `<` _type_ `>` _pattern_

If `Alt` is a _type_ and `std::is_polymorphic_v<V>` is `true`, let `p` be
`dynamic_cast<Alt'*>(&v)` where `Alt'` has the same _cv_-qualifications as
`decltype(&v)`. The alternative pattern matches if `p` contextually converted
to `bool` evaluates to `true`, and _pattern_ matches `*p`.

While the __semantics__ of the pattern is specified in terms of `dynamic_cast`,
[@N3449] describes techniques involving vtable pointer caching and hash conflict
minimization that are implemented in the [@Mach7] library, as well as mentions
of further opportunities available for a compiler intrinsic.

Given the following definition of a `Shape` class hierarchy:

```cpp
struct Shape { virtual ~Shape() = default; };

struct Circle : Shape { int radius; };
struct Rectangle : Shape { int width, height; };
```

::: tonytable

### Before
```cpp
virtual int Shape::get_area() const = 0;

int Circle::get_area() const override {
  return 3.14 * radius * radius;
}

int Rectangle::get_area() const override {
  return width * height;
}
```

### After
```cpp
int get_area(const Shape& shape) {
  inspect (shape) {
    <Circle> [r]: return 3.14 * r * r;
    <Rectangle> [w, h]: return w * h;
  }
}
```

:::

#### Binding Pattern

The binding pattern has the form:

> | _identifier_ @ _pattern_

and matches value `v` if _pattern_ matches it. The introduced name behaves as
an lvalue referring to `v`, and is in scope from its point of declaration until
the end of the statement following the pattern label.

```cpp
std::variant<Point, /* ... */> v = /* ... */;

inspect (v) {
    <Point> p @ [x, y]: // ...
//          ^^^^^^^^^^ binding pattern
}
```

#### Dereference Pattern

The dereference pattern has the form:

> | `*` _pattern_

and matches value `v` if _pattern_ matches `*v`.

```cpp
struct Node {
    int value;
    std::unique_ptr<Node> lhs, rhs;
};

template <typename Visitor>
void print_leftmost(const Node& node) {
    inspect (node) {
        [.value: v, .lhs: nullptr]: std::cout << v << '\n';
        [.lhs: *l]: print_leftmost(l);
    }
}
```

[ _Note:_ The dereference operation is performed unconditionally. --- _end note_ ]

Dereference patterns frequently come into play with complex patterns using
recursive variant types. An example of such a problem is the rebalance
operation for red-black trees. Using pattern matching this can be expressed
succinctly and in a way that is easily verified visually as having the correct
algorithm.

```c++
enum Color { R, B };

template<typename T>
struct Tree;

struct Empty { };

template<typename T>
struct Valued {
  Color c;
  std::shared_ptr<Tree<T>> lhs;
  T value;
  std::shared_ptr<Tree<T>> rhs;
};

template<typename T>
struct Tree : std::variant<Empty, Valued<T>> {
  using std::variant<Empty, Valued<T>>::variant;
};

template<typename T>
Tree<T> balance(Color c, std::shared_ptr<Tree<T>> lhs, T value, std::shared_ptr<Tree<T>> rhs) {
  using V = Valued<T>;
  return inspect(c,lhs,value,rhs) {
    [^B, *<V> [^R, *<V> [^R, a, x, b], y, c], z, d]
      => V{R, std::make_shared<Tree<T>>(V{B, a, x, b},
           y, std::make_shared<Tree<T>>(V{B, c, z, d}},
    [^B, *<V> [^R, a, x, *<V> [^R, b, y, c]], z, d]
      => V{R, std::make_shared<Tree<T>>(V{B, a, x, b},
           y, std::make_shared<Tree<T>>(V{B, c, z, d}},
    [^B, a, x, *<V> [^R, *<V> [^R, b, y, c], z, d]]
      => V{R, std::make_shared<Tree<T>>(V{B, a, x, b},
           y, std::make_shared<Tree<T>>(V{B, c, z, d}},
    [^B, a, x, *<V> [^R, b, y, *<V> [^R, c, z, d]]]
      => V{R, std::make_shared<Tree<T>>(V{B, a, x, b},
           y, std::make_shared<Tree<T>>(V{B, c, z, d}},
    [color, a, x, b] => V{color, a, x, b}
  };
}
```

Compare this to what we currently need to do:

```c++
template<typename T>
Tree<T> balance(Color c, std::shared_ptr<Tree<T>> lhs, T value, std::shared_ptr<Tree<T>> rhs) {
  if(c == B) {
    // case 1
    if(Valued<T> * lhsValued = std::get_if<Valued<T>>(lhs.get());
       lhsValued && lhsValued->c == R)
    {
      // case 1.a
      if(Valued<T> * lhsLhsValued = std::get_if<Valued<T>>(lhsValued->lhs.get());
         lhsLhsValued && lhsLhsValued->c == R)
      {
          return Valued<T>{
            R,
            std::make_shared<Tree<T>>(Valued<T>{
              B,
              lhsLhsValued->lhs,
              lhsLhsValued->value,
              lhsLhsValued->rhs}),
            lhsValued->value,
            std::make_shared<Tree<T>>(Valued<T>{
              B,
              lhsValued->rhs,
              value,
              rhs})};
      }
      // case 1.b
      if(Valued<T> * lhsRhsValued = std::get_if<Valued<T>>(lhsValued->rhs.get());
         lhsRhsValued && lhsRhsValued->c == R)
      {
          return Valued<T>{
            R,
            std::make_shared<Tree<T>>(Valued<T>{
              B,
              lhsValued->lhs,
              lhsValued->value,
              lhsRhsValued->lhs}),
            lhsRhsValued->value,
            std::make_shared<Tree<T>>(Valued<T>{
              B,
              lhsRhsValued->rhs,
              value,
              rhs})};
      }
    }
    // case 2
    if(Valued<T> * rhsValued = std::get_if<Valued<T>>(rhs.get());
       rhsValued && rhsValued->c == R)
    {
      // case 2.a
      if(Valued<T> * rhsLhsValued = std::get_if<Valued<T>>(rhsValued->lhs.get());
         rhsLhsValued && rhsLhsValued->c == R)
      {
          return Valued<T>{
            R,
            std::make_shared<Tree<T>>(Valued<T>{
              B,
              lhs,
              value,
              rhsLhsValued->lhs}),
            rhsLhsValued->value,
            std::make_shared<Tree<T>>(Valued<T>{
              B,
              rhsLhsValued->rhs,
              rhsValued->value,
              rhsValued->rhs})};
      }

      // case 2.b
      if(Valued<T> * rhsRhsValued = std::get_if<Valued<T>>(rhsValued->rhs.get());
         rhsRhsValued && rhsRhsValued->c == R)
      {
          return Valued<T>{
            R,
            std::make_shared<Tree<T>>(Valued<T>{
              B,
              lhs,
              value,
              rhsValued->lhs}),
            rhsValued->value,
            std::make_shared<Tree<T>>(Valued<T>{
              B,
              rhsRhsValued->lhs,
              rhsRhsValued->value,
              rhsRhsValued->rhs})};
      }
    }
  }
  return Valued<T>{c, lhs, value, rhs};
}
```

#### Extractor Pattern

The extractor pattern has the following two forms:

> | `(` _constant-expression_ `!` _pattern_ `)`
> | `(` _constant-expression_ `?` _pattern_ `)`

Let `c` be the _constant-expression_. The first form matches value `v`
if _pattern_ matches `e` where `e` is the result of a call to member
`c.extract(v)` or else a non-member ADL-only `extract(c, v)`.

For second form, let `e` be the result of a call to member `c.try_extract(v)`
or else a non-member ADL-only `try_extract(c, v)`. It matches value `v` if `e`
is contextually convertible to `bool`, evaluates to `true`,
and _pattern_ matches `*e`.

```cpp
constexpr struct {
    std::optional<std::array<std::string_view, 2>>
    try_extract(std::string_view sv) const;
} email;

constexpr struct {
    std::optional<std::array<std::string_view, 3>>
    try_extract(std::string_view sv) const;
} phone_number;

inspect (s) {
    (email? [address, domain]): std::cout << "got an email";
    (phone_number? ["415", _, _]): std::cout << "got a San Francisco phone number";
//  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ extractor pattern
}
```

## Pattern Guard

The pattern guard has the form:

> | `if (` _expression_ `)`

Let `e` be the result of _expression_ contextually converted to `bool`.
If `e` is `true`, control is passed to the corresponding statement.
Otherwise, control flows to the subsequent pattern.

The pattern guard allows to perform complex tests that cannot be performed
within the _pattern_. For example, performing tests across multiple bindings:

```cpp
inspect (p) {
    [x, y] if (test(x, y)): std::cout << x << ',' << y << " passed";
//         ^^^^^^^^^^^^^^^ pattern guard
}
```

This also diminishes the desire for fall-through semantics within the
statements, an unpopular feature even in `switch` statements.

## `inspect constexpr`

Every _pattern_ is able to determine whether it matches value `v` as a boolean
expression in isolation. Let `MATCHES` be the condition for which a _pattern_
matches a value `v`. Ignoring any potential optimization opportunities, we're
able to perform the following transformation:

::: tonytable

### `inspect` {width=.4}
```cpp
inspect (v) {
  pattern1 if (cond1): stmt1
  pattern2: stmt2
  // ...
}
```

### `if` {width=.6}
```cpp
if (MATCHES(pattern1, v) && cond1) stmt1
else if (MATCHES(pattern2, v)) stmt2
// ...
```

:::

`inspect constexpr` is then formulated by applying `constexpr` to every `if` branch.

::: tonytable

### `inspect constexpr` {width=.4}
```cpp
inspect constexpr (v) {
  pattern1 if (cond1): stmt1
  pattern2: stmt2
  // ...
}
```

### `if constexpr` {width=.6}
```cpp
if constexpr (MATCHES(pattern1, v) && cond1) stmt1
else if constexpr (MATCHES(pattern2, v)) stmt2
// ...
```

:::

## Exhaustiveness and Usefulness

`inspect` can be declared `[[strict]]` for implementation-defined exhaustiveness
and usefulness checking.

__Exhaustiveness__ means that all values of the type of the value being matched
is handled by at least one of the cases. For example, having a `_:` case makes
any `inspect` statement exhaustive.

__Usefulness__ means that every case handles at least one value of the type of
the value being matched. For example, any case that comes after a `_:` case
would be useless.

Warnings for pattern matching [@Warnings] discusses and outlines an algorithm
for exhaustiveness and usefulness for OCaml, and is the algorithm used by Rust.

# Proposed Wording

The following is the beginning of an attempt at a syntactic structure.

Add to __§8.4 [stmt.select]__ of ...

\pnum{1}Selection statements choose one of several flows of control.

> | *selection-statement:*
> |     `if constexpr`*~opt~* `(` *init-statement~opt~* *condition* `)` *statement*
> |     `if constexpr`*~opt~* `(` *init-statement~opt~* *condition* `)` *statement* `else` *statement*
> |     `switch (` *init-statement~opt~* *condition* `)` *statement*
> |     [`inspect constexpr`*~opt~* `(` *init-statement~opt~* *condition* `)` *trailing-return-type~opt~* `{` *inspect-case-seq* `}`]{.add}

> ::: add
> | *inspect-case-seq:*
> |     *inspect-statement-case-seq*
> |     *inspect-expression-case-seq*
>
> | *inspect-statement-case-seq:*
> |     *inspect-statement-case*
> |     *inspect-statement-case-seq* *inspect-statement-case*
>
> | *inspect-expression-case-seq:*
> |     *inspect-expression-case*
> |     *inspect-expression-case-seq* `,` *inspect-expression-case*
>
> | *inspect-statement-case:*
> |     *inspect-pattern* *inspect-guard~opt~* `:` *statement*
>
> | *inspect-expression-case:*
> |     *inspect-pattern* *inspect-guard~opt~* `=>` *assignment-expression*
>
> | *inspect-pattern:*
> |     *wildcard-pattern*
> |     *identifier-pattern*
> |     *expression-pattern*
> |     *structured-binding-pattern*
> |     *alternative-pattern*
> |     *binding-pattern*
> |     *dereference-pattern*
> |     *extractor-pattern*
>
> | *inspect-guard:*
> |     `if (` *expression* `)`
> :::

# Design Decisions

## Extending Structured Bindings Declaration

The design is intended to be consistent and to naturally extend the notions
introduced by structured bindings. That is, The subobjects are __referred__
to rather than being assigned into new variables.

## `inspect` rather than `switch`

This proposal introduces a new `inspect` statement rather than trying to extend
the `switch` statement. [@P0095R0] had proposed extending `switch` and received
feedback to "leave `switch` alone" in Kona 2015.

The following are some of the reasons considered:

  - `switch` allows the `case` labels to appear __anywhere__, which hinders
    the goal of pattern matching in providing __structured__ inspection.
  - The fall-through semantics of `switch` generally results in `break` being
    attached to every case, and is known to be error-prone.
  - `switch` is purposely restricted to integrals for __guaranteed__ efficiency.
    The primary goal of pattern matching in this paper is expressiveness while
    being at least as efficient as the naively hand-written code.

## First Match rather than Best Match

The proposed matching algorithm has first match semantics. The choice of first
match is mainly due to complexity. Our overload resolution rules for function
declarations are extremely complex and is often a mystery.

Best match via overload resolution for function declarations are absolutely
necessary due to the non-local and unordered nature of declarations.
That is, function declarations live in different files and get pulled in
via mechanisms such as `#include` and `using` declarations, and there is no
defined order of declarations like Haskell does, for example. If function
dispatching depended on the order of `#include` and/or `using` declarations
being pulled in from hundreds of files, it would be a complete disaster.

Pattern matching on the other hand do not have this problem because
the construct is local and ordered in nature. That is, all of the candidate
patterns appear locally within `inspect (x) { /* ... */ }` which cannot span
across multiple files, and appear in a specified order. This is consistent with
`try`/`catch` for the same reasons: locality and order.

Consider also the amount of limitations we face in overload resolution due
to the opacity of user-defined types. `T*` is related to `unique_ptr<T>` as
it is to `vector<T>` as far as the type system is concerned. This limitation
will likely be even bigger in a pattern matching context with the amount of
customization points available for user-defined behavior.

## Language rather than Library

There are three popular pattern matching libraries for C++ today:
[@Mach7], [@Patterns], and [@SimpleMatch].

While the libraries have been useful for gaining experience with interfaces and
implementation, the issue of introducing identifiers, syntactic overhead of
the patterns, and the reduced optimization opportunities justify support as
a language feature from a usability standpoint.

## Matchers and Extractors

Many languages provide a wide array of patterns through various syntactic forms.
While this is a potential direction for C++, it would mean that every new type
of matching requires new syntax to be added to the language. This would result
in a narrow set of types being supported through limited customization points.

Matchers and extractors are supported in order to minimize the number of
patterns with special syntax. The following are example matchers and extractors
that commonly have special syntax in other languages.

+----------------------------+---------------------+
| __Matchers / Extractors__  | __Other Languages__ |
+============================+=====================+
| `any_of{1, 2, 3}`          | `1 | 2 | 3`         |
+----------------------------+---------------------+
| `within{1, 10}`            | `1..10`             |
+----------------------------+---------------------+
| `(both! [[x, 0], [0, y]])` | `[x, 0] & [0, y]`   |
+----------------------------+---------------------+
| `(at! [p, [x, y]])`        | `p @ [x, y]`        |
+----------------------------+---------------------+

Each of the matchers and extractors can be found in the [Examples] section.

## Wildcard Syntax

[@P1110R0] discusses wildcard/placeholder syntax in different contexts of
the language. The intent of this proposal is to consolidate with the results
of the decision of [@P1110R0].

## Identifier and Expression Patterns Disambiguation

Both identifier and expression patterns can contain an unqualified name. It can
resolve into local variable name in case of [expression pattern](#expression-pat).
And introduce new identifier into scope in case of
[identifier pattern](#identifier-pat).

This paper proposes to use leading caret `^` symbol in expression pattern (exact
symbol or keyword is subject to bikeshed).

```cpp
constexpr int x = /* ... */

inspect (v) {
  ^x: std::cout << "v matches x by value";
  x: std::cout << "introduces new identifier x bound to v: " << x;
}
```

In the example above `^` is used to make former pattern to look for name `x`
using unqualified name lookup rules. While latter introduces new identifier `x`
in pattern scope.

Adding "introducer" for expression pattern have other advantages. They become
apparent when compared to alternative designs below.

### Using "introducer" in identifier pattern.

Some languages use keywords as part of identifier pattern syntax. In
[@SwiftPatterns] keyword `let` is used to denote identifier pattern, and the
same keyword is used to declare bindings in general.

Syntax for identifier pattern can use `let` "introducer" instead, making
expression pattern look more like normal expression seen anywhere else in
codebase.

```cpp
inspect(v) {
  (1 + get_int()): std::cout << "expression matched";
  let x: std::cout << "introduce new identifier x bound to v: " << x;
}
```

While it makes expressions look more natural in patterns, it significantly
limits scope of possible syntax that can be used in patterns. Expression pattern
would contain any expression syntax, such as parentheses, arithmetic operation
signs and etc. Any future pattern syntax would not be able to use these
syntax elements or will cause possible ambiguity for existing code.

### Not using "introducer" in any pattern.

It is possible to define "order of precedence" for pattern disambiguation. So
that if unqualified name lookup failed - identifier pattern would be used instead.

```cpp
constexpr int x = /* ... */
inspect(v) {
  x: std::cout << "v matches x by value";
  y: std::cout << "introduces new identifier y";
}
```

This solution in addition to having same problem as the one above, also makes code
behave differently depending on scope of execution and will be very prone to
errors.

### Use "introducer" for both patterns.

Both identifier and expression patterns could have used some leading "introducer"
syntax. For example if we were to use `!` and `^`:

```cpp
constexpr int x = /* ... */
inspect(v) {
  ^x: std::cout << "v matches x by value";
  !x: std::cout << "introduces new identifier x bound to v: " << x;
}
```

While using different introducer syntax for each of patterns makes code more
clear in its' intent. It isn't strictly necessary, so we'll be introducing syntax
just for reader. It takes more syntax space away from any further pattern
development. And is still possible to get wrong and make mistake.

# Runtime Performance

The following are few of the optimizations that are worth noting.

## Structured Binding Pattern

Structured binding patterns can be optimized by performing `switch` over
the columns with the duplicates removed, rather than the naive approach of
performing a comparison per element. This removes unnecessary duplicate
comparisons that would be performed otherwise. This would likely require some
wording around "comparison elision" in order to enable such optimizations.

## Alternative Pattern

The sequence of alternative patterns can be executed in a `switch`.

## Open Class Hierarchy

[@N3449] describes techniques involving vtable pointer caching and hash conflict
minimization that are implemented in the [@Mach7] library, but also mentions
further opportunities available for a compiler solution.

# Examples

## Predicate-based Discriminator

Short-string optimization using a __predicate__ as a discriminator rather than
an explicitly stored __value__. Adapted from the pattern matching presentation
given by Bjarne Stroustrup at Urbana-Champaign 2015.

```cpp
struct String {
    enum Storage { Local, Remote };

    int size;
    union {
        char local[32];
        struct { char *ptr; int unused_allocated_space; } remote;
    };

    // Predicate-based discriminator derived from `size`.
    Storage index() const { return size > sizeof(local) ? Remote : Local; }

    // Opt into Variant-Like protocol.
    template <Storage S>
    auto &&get() {
        if constexpr (S == Local) return local;
        else if constexpr (S == Remote) return remote;
    }

    char *data();
};

namespace std {
    // Opt into Variant-Like protocol.

    template <>
    struct variant_size<String> : std::integral_constant<std::size_t, 2> {};

    template <>
    struct variant_alternative<String::Local, String> {
        using type = decltype(String::local);
    };

    template <>
    struct variant_alternative<String::Remote, String> {
        using type = decltype(String::remote);
    };
}

char* String::data() {
    inspect (*this) {
        <Local> l: return l;
        <Remote> r: return r.ptr;
    }
    // switch (index()) {
    //     case Local: {
    //         std::variant_alternative_t<Local, String> &l = get<Local>();
    //         return l;
    //     }
    //     case Remote: {
    //         std::variant_alternative_t<Remote, String> &r = get<Remote>();
    //         return r.ptr;
    //     }
    // }
}
```

## "Closed" Class Hierarchy

A class hierarchy can effectively be closed with an `enum` that maintains
the list of its members, and provide efficient dispatching by opting into
the Variant-Like protocol.

A generalized mechanism of pattern is used extensively in LLVM;
`llvm/Support/YAMLParser.h` [@YAMLParser] is an example.

```cpp
struct Shape { enum Kind { Circle, Rectangle } kind; };

struct Circle : Shape {
    Circle(int radius) : Shape{Shape::Kind::Circle}, radius(radius) {}

    int radius;
};

struct Rectangle : Shape {
    Rectangle(int width, int height)
        : Shape{Shape::Kind::Rectangle}, width(width), height(height) {}

    int width, height;
};

namespace std {
    template <>
    struct variant_size<Shape> : std::integral_constant<std::size_t, 2> {};

    template <>
    struct variant_alternative<Shape::Circle, Shape> { using type = Circle; };

    template <>
    struct variant_alternative<Shape::Rectangle, Shape> { using type = Rectangle; };
}

Shape::Kind index(const Shape& shape) { return shape.kind; }

template <Kind K>
auto&& get(const Shape& shape) {
    return static_cast<const std::variant_alternative_t<K, Shape>&>(shape);
}

int get_area(const Shape& shape) {
    inspect (shape) {
        <Circle> c: return 3.14 * c.radius * c.radius;
        <Rectangle> r: return r.width * r.height;
    }
    // switch (index(shape)) {
    //     case Shape::Circle: {
    //         const std::variant_alternative_t<Shape::Circle, Shape>& c =
    //             get<Shape::Circle>(shape);
    //         return 3.14 * c.radius * c.radius;
    //     }
    //     case Shape::Rectangle: {
    //         const std::variant_alternative_t<Shape::Rectangle, Shape>& r =
    //             get<Shape::Rectangle>(shape);
    //         return r.width * r.height;
    //     }
    // }
}
```

## Matcher: `any_of`

The logical-or pattern in other languages is typically spelled
_pattern_~0~ `|` _pattern_~1~ `| ... |` _pattern_~N~, and matches
value `v` if any _pattern~i~_ matches `v`.

This provides a restricted form (constant-only) of the logical-or pattern.

```cpp
template <typename... Ts>
struct any_of : std::tuple<Ts...> {
    using tuple::tuple;

    template <typename U>
    bool match(const U& u) const {
        return std::apply([&](const auto&... xs) {
            return (... || xs == u);
        }, *this);
    }
};
```

```cpp
int fib(int n) {
    inspect (n) {
        x if (x < 0): return 0;
        ^(any_of{1, 2}): return n;  // 1 | 2
        x: return fib(x - 1) + fib(x - 2);
    }
}
```

## Matcher: `within`

The range pattern in other languages is typically spelled `first..last`,
and matches `v` if `v` $\in$ `[first, last]`.

```cpp
struct within {
    int first, last;

    bool match(int n) const { return first <= n && n <= last; }
};
```

```cpp
inspect (n) {
    ^(within{1, 10}): {  // 1..10
        std::cout << n << " is in [1, 10].";
    }
    _: {
        std::cout << n << " is not in [1, 10].";
    }
}
```

## Extractor: `both`

The logical-and pattern in other languages is typically spelled
_pattern_~0~ `&` _pattern_~1~ `& ... &` _pattern_~N~, and matches `v`
if all of _pattern_~i~ matches `v`.

This extractor emulates binary logical-and with a `std::pair` where
both elements are references to value `v`.

```cpp
inline constexpr struct {
    template <typename U>
    std::pair<U&&, U&&> extract(U&& u) const {
        return {std::forward<U>(u), std::forward<U>(u)};
    }
} both;
```

```cpp
inspect (v) {
    (both! [[x, 0], [0, y]]): // ...
}
```

## Extractor: `at`

The binding pattern in other languages is typically spelled
_identifier_ `@` _pattern_, binds _identifier_ to `v` and  matches if _pattern_
matches `v`. This is a special case of the logical-and pattern
(_pattern_~0~ `&` _pattern_~1~) where _pattern_~0~ is an _identifier_.
That is, _identifier_ `&` _pattern_ has the same semantics as
_identifier_ `@` _pattern_, which means we get `at` for free from  `both` above.

```cpp
inline constexpr at = both;
```

```cpp
inspect (v) {
    <Point> (at! [p, [x, y]]): // ...
    // ...
}
```

# Future Work

## Language Support for Variant

The design of this proposal also accounts for a potential language support
for variant. It achieves this by keeping the alternative pattern flexible
for new extensions via `<` _new_entity_ `>` _pattern_.

Consider an extension to `union` that allows it to be tagged by an integral,
and has proper lifetime management such that the active alternative need not
be destroyed manually.

```cpp
// `: type` specifies the type of the underlying tag value.
union U : int { char small[32]; std::vector<char> big; };
```

We could then allow `<` _qualified-id_ `>` that refers to a `union`
alternative to support pattern matching.

```cpp
U u = /* ... */;

inspect (u) {
    <U::small> s: std::cout << s;
    <U::big> b: std::cout << b;
}
```

The main point is that whatever entity is introduced as the discriminator,
the presented form of alternative pattern should be extendable to support it.

## Patterns in range-based `for` loop

```cpp
for (auto&& [0, y] : points) {
    // only operate on points on the y-axis.
}
```

Structured binding declaration is allowed in range-based `for` loop:

```cpp
for (auto&& [x, y] : points) { /* ... */ }
```

The `[x, y]` part can also be a pattern of an `inspect` statement rather than
a structured binding declaration.

::: tonytable

### Before
```cpp
for (auto&& p : points) {
  auto&& [x, y] = p;
  // ...
}
```

### After
```cpp
for (auto&& p : points) {
  inspect (p) {
    [x, y]: // ...
  }
}
```

:::

With this model, allowing patterns directly in range-based `for` loop becomes natural.

::: tonytable

### Code
```cpp
for (auto&& [0, y] : points) {
  // only points on the y-axis.
}
```

### Expanded
```cpp
for (auto&& p : points) {
  inspect (p) {
    [0, y]: // ...
  }
  // falls through if no match
}
```

:::

## Note on Ranges

The benefit of pattern matching for ranges is unclear. While it's possible to
come up with a ranges pattern, e.g., `{x, y, z}` to match against a fixed-size
range, it's not clear whether there is a worthwhile benefit.

The typical pattern found in functional languages of matching a range on
head and tail doesn't seem to be all that common or useful in C++ since
ranges are generally handled via loops rather than recursion.

Ranges likely will be best served by the range adaptors / algorithms,
but further investigation is needed.

# Acknowledgements

Thanks to all of the following:

  - Yuriy Solodkyy, Gabriel Dos Reis, Bjarne Stroustrup for their prior work on
    [@N3449], Open Pattern Matching for C++ [@OpenPM], and the [@Mach7] library.
  - Pattern matching presentation by Bjarne Stroustrup at Urbana-Champaign 2015.
  - David Sankel for his work on [@P0095R1].
  - Jeffrey Yasskin/JF Bastien for their work on [@P1110R0].
  - (In alphabetical order by last name) John Bandela, Agustín Bergé,
    Ori Bernstein, Matt Calabrese, Alexander Chow, Louis Dionne,
    Michał Dominiak, Eric Fiselier, Zach Laine, Jason Lucas, David Sankel,
    Bjarne Stroustrup, Tony Van Eerd, and everyone else who contributed to
    the discussions, and encouraged me to write this paper.

---
references:
  - id: N3449
    citation-label: N3449
    title: "Open and Efficient Type Switch for C++"
    author:
      family: Stroustrup
      given: Bjarne
    issued:
      year: 2012
    URL: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3449.pdf
  - id: P0095R0
    citation-label: P0095R0
    title: "Pattern Matching and Language Variants"
    author:
      family: Sankel
      given: David
    issued:
      year: 2015
    URL: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0095r0.html
  - id: P0095R1
    citation-label: P0095R1
    title: "Pattern Matching and Language Variants"
    author:
      family: Sankel
      given: David
    issued:
      year: 2016
    URL: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0095r1.html
  - id: P0144R2
    citation-label: P0144R2
    title: "Structured bindings"
    author:
      - family: Sutter
        given: Herb
      - family: Stroustrup
        given: Bjarne
      - family: Reis
        given: [Gabriel, Dos]
    issued:
      year: 2016
    URL: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0144r2.pdf
  - id: P1260R0
    citation-label: P1260R0
    title: "Pattern Matching"
    author:
      - family: Park
        given: Michael
    issued:
      year: 2018
    URL: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1260r0.pdf
  - id: P1308R0
    citation-label: P1308R0
    title: "Pattern Matching"
    author:
      - family: Sankel
        given: David
      - family: Sarginson
        given: Dan
      - family: Murzin
        given: Sergei
    issued:
      year: 2018
    URL: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1308r0.html
  - id: OpenPM
    citation-label: OpenPM
    title: "Open Pattern Matching for C++"
    author:
      - family: Solodkyy
        given: Yuriy
      - family: Reis
        given: [Gabriel, Dos]
      - family: Stroustrup
        given: Bjarne
    URL: http://www.stroustrup.com/OpenPatternMatching.pdf
  - id: Mach7
    citation-label: Mach7
    title: "Mach7: Pattern Matching for C++"
    author:
      - family: Solodkyy
        given: Yuriy
      - family: Reis
        given: [Gabriel, Dos]
      - family: Stroustrup
        given: Bjarne
    URL: https://github.com/solodon4/Mach7
  - id: SimpleMatch
    citation-label: SimpleMatch
    title: "Simple, Extensible C++ Pattern Matching Library"
    author:
      - family: Bandela
        given: John
    URL: https://github.com/jbandela/simple_match
  - id: Patterns
    citation-label: Patterns
    title: "Pattern Matching in C++"
    author:
      - family: Park
        given: Michael
    URL: https://github.com/mpark/patterns
  - id: Warnings
    citation-label: Warnings
    title: "Warnings for pattern matching"
    author:
      - family: Maranget
        given: Luc
    URL: http://moscova.inria.fr/~maranget/papers/warn/index.html
  - id: P1110R0
    citation-label: P1110R0
    title: "A placeholder with no name"
    author:
      - family: Yasskin
        given: Jeffrey
      - family: Bastien
        given: JF
    issued:
      year: 2018
    URL: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1110r0.html
  - id : YAMLParser
    citation-label : YAMLParser
    URL: http://llvm.org/doxygen/YAMLParser_8h_source.html
  - id : SwiftPatterns
    citation-label : Swift Patterns
    title : "Swift Reference Manual - Patterns"
    URL: https://docs.swift.org/swift-book/ReferenceManual/Patterns.html
---
